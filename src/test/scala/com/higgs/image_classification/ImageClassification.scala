package com.higgs.image_classification

import com.databricks.sparkdl.DeepImageFeaturizer
import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.classification.LogisticRegression
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator
import org.apache.spark.sql.SparkSession

/**
  * User: JerryYou
  *
  * Date: 2019-02-28
  *
  * Copyright (c) 2018 devops
  *
  * <<licensetext>>
  */
object ImageClassification {

  var session = SparkSession.builder().appName("ImageClass")
    .getOrCreate()


  def loadImage(imageDir: String) = {
    session.read
      .format("image")
      .load(imageDir)
  }


  def main(args: Array[String]): Unit = {

    val imageDir = args(0)
    val data = loadImage(imageDir).randomSplit(Array(0.6,0.4))
    val train_df = data.apply(0)
    val test_df = data.apply(1)

    //  train logistic regression on features generated by InceptionV3:
    val featurizer = new DeepImageFeaturizer()
      .setInputCol("image")
      .setOutputCol("features")
      .setModelName("InceptionV3")

    //  Build our logistic regression transformation
    val lr = new LogisticRegression()
      .setMaxIter(20)
      .setRegParam(0.05)
      .setElasticNetParam(0.3)
      .setLabelCol("label")

    //  Build our ML piepline
    val pipeline = new Pipeline()
      .setStages(Array(featurizer, lr))

    // Build our model
    val model = pipeline
      .fit(train_df)
    //  Run our model against the test dataset
    val tested_df = model
      .transform(test_df)
    // Evaluate our model
    val evaluator = new MulticlassClassificationEvaluator()
      .setMetricName("accuracy")

    val accuracy = evaluator
      .evaluate(tested_df.select("prediction", "label"))
    println(s"Test Accuracy:$accuracy")

  }
}
